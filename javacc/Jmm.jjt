options {
    LOOKAHEAD = 1;
    FORCE_LA_CHECK = false;
    DEBUG_PARSER = false;
}

PARSER_BEGIN(Jmm)
import java.util.ArrayList;
import java.util.List;
import pt.up.fe.comp.jmm.report.ReportType;
import pt.up.fe.comp.jmm.report.Stage;
import pt.up.fe.comp.jmm.report.Report;
public class Jmm
{
    List<Report> reports = new ArrayList<Report>();

    public static void main(String[] args) throws ParseException {
		Jmm grammar = new Jmm(System.in);
		SimpleNode root = grammar.Program(); // returns reference to root node

		root.dump(""); // prints the tree on the screen
    }

    public List<Report> getReports() {
        return reports;
    }
}
PARSER_END(Jmm)

SKIP :
{
	" " | "\r" | "\t" | "\n"
	| < "//" (~["\r", "\n"])* ["\r", "\n"] >
	| "/*"  : MULTILINE_STATE
}

<MULTILINE_STATE> SKIP :
{
	"*/" : DEFAULT |
	< ~[] >
}

TOKEN:
{
    // operators
    < SUM: "+" >
    | < SUB: "-" >
    | < MUL: "*" >
    | < DIV: "/" >
    | < AND: "&&" >
    | < LT: "<" >

    // symbols
    | < OPEN_BRACKET: "[" >
    | < CLOSE_BRACKET: "]" >
    | < OPEN_PAR: "(" >
    | < CLOSE_PAR: ")" >
    | < OPEN_BRACES: "{" >
    | < CLOSE_BRACES: "}" >
    | < DOT: ".">
    | < COMMA: ",">
    | < SEMICOLON: ";" >
    | < NOT: "!" >
    | < EQ: "=" >

    // keywords
    | < TRUE: "true" >
    | < FALSE: "false">
    | < THIS: "this">
    | < NEW: "new">
    | < LENGTH: "length">
    | < IMPORT: "import" >
    | < CLASS: "class" >
    | < EXTENDS: "extends" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < MAIN: "main" >
    | < RETURN: "return" >
    | < WHILE: "while" >
    | < IF: "if" >
    | < ELSE: "else" >

    // variable types
    | < BOOLEAN: "boolean" >
    | < INT: "int">
    | < VOID: "void" >
    | < STRING: "String" >

    // regex
    | < IDENTIFIER: ["A"-"Z","a"-"z","$","_"](["0"-"9","A"-"Z","a"-"z","_","$"])* >
    | < INTEGERLITERAL: ((["0"-"9"])+|("0x"(["0"-"9","a"-"f","A"-"F"])+)|("0b"(["0","1"])+)) >
    
}

JAVACODE
void whileRecoverySkip() {
    // if current token is the last CLOSE_PAR or the next token is the OPEN_BRACES
    if ((getToken(0).kind == CLOSE_PAR && getToken(1).kind != CLOSE_PAR) || getToken(1).kind == OPEN_BRACES) return;
    Token t, next;
    do {
        t = getNextToken();
        next = getToken(1);
    }
    // while the next token is not EOF or OPEN_BRACES and the current token is not the last CLOSE_PAR
    while (next.kind != 0 && next.kind != OPEN_BRACES && (t.kind != CLOSE_PAR || next.kind == CLOSE_PAR));
}

SimpleNode Program(): {}
{
    try {
        (ImportDeclaration())* ClassDeclaration() <EOF>  { return jjtThis; } // Java code inside brackets
    } catch(ParseException e) {
        reports.add(new Report(ReportType.ERROR, Stage.SYNTATIC, token.beginLine, e.getMessage()));
        return jjtThis;
    }
}

void ImportDeclaration() #void : {}
{
    <IMPORT> Package() <SEMICOLON>
}

void Package() #Import : {Token t1;}
{
	t1 = <IDENTIFIER> { StringBuilder name = new StringBuilder(t1.image); } (<DOT> t1 = <IDENTIFIER> { name.append("." + t1.image); })*
	{ jjtThis.put("name", name.toString()); }
}

void ClassDeclaration() #Class : {Token t1, t2;}
{
	<CLASS> t1 = <IDENTIFIER> {jjtThis.put("name", t1.image);} (<EXTENDS> t2 = <IDENTIFIER> {jjtThis.put("extends", t2.image);})? ClassBody()
}

void ClassBody() #void : {}
{
	<OPEN_BRACES> (VarDeclaration())* (ClassMethodDeclaration())* <CLOSE_BRACES>
}

void VarDeclaration() #Variable: {Token t2;}
{
    Type() t2 = <IDENTIFIER> { jjtThis.put("name", t2.image); jjtThis.put("line", String.valueOf(t2.beginLine)); } <SEMICOLON>
}

// -------------
// ---Methods---
// -------------

void ClassMethodDeclaration() #void : {}
{
    <PUBLIC> ( MethodDeclaration() | MainMethodDeclaration())
}

void MethodDeclaration() #Method : {Token t1;}
{
	Type() t1 = <IDENTIFIER> {jjtThis.put("name", t1.image);} <OPEN_PAR> (ParamList())? <CLOSE_PAR> MethodBody()
}

void MainMethodDeclaration() #MainMethod : {Token t1;}
{
	<STATIC> <VOID> t1 = <MAIN> {jjtThis.put("name", t1.image);} <OPEN_PAR> MainParam() <CLOSE_PAR> MainMethodBody()
}

void ParamList() #void : {}
{
	Param() (<COMMA> Param())*
}

void Param() #Parameter : {Token t1;}
{
    Type() t1 = <IDENTIFIER> {jjtThis.put("name", t1.image);}
}

void MainParam() #MainParameter : {Token t1;}
{
	<STRING> <OPEN_BRACKET> <CLOSE_BRACKET> t1 = <IDENTIFIER> {jjtThis.put("name", t1.image);}
}

void MainMethodBody() #MainBody : {}
{
	<OPEN_BRACES> (LOOKAHEAD(2) VarDeclaration())* (Statement())* <CLOSE_BRACES>
}

void MethodBody() #Body : {}
{
	<OPEN_BRACES> (LOOKAHEAD(2) VarDeclaration())* (Statement())* ReturnStatement() <CLOSE_BRACES>
}

void Type(): {Token t1;}
{
    <INT> {jjtThis.put("name", "int");} (<OPEN_BRACKET> <CLOSE_BRACKET> {jjtThis.put("array", "true");})?
    | <BOOLEAN> {jjtThis.put("name", "boolean");}
    | t1 = <IDENTIFIER> {jjtThis.put("name", t1.image);}
}

// --------------
// --Statements--
// --------------

void Statement() #void : { Token t;}
{
	BlockStatement()
	| IfElseStatement()
	| WhileStatement()
    | Expression() (t = <EQ> Expression() {jjtThis.put("line", String.valueOf(t.beginLine)); jjtThis.put("column", String.valueOf(t.beginColumn)); } #Assignment(2))? <SEMICOLON>
}

void BlockStatement() #Block : {}
{
	<OPEN_BRACES> (Statement())* <CLOSE_BRACES>
}

void IfElseStatement() #IfElse : {}
{
	<IF> Condition() Statement() <ELSE> Statement()
}

void WhileStatement() #While : {}
{
	<WHILE> try {
	    Condition()
        Statement()
	} catch (ParseException e) {
	    reports.add(new Report(ReportType.ERROR, Stage.SYNTATIC, token.beginLine, e.getMessage()));

        whileRecoverySkip();  // skip to open braces
        Statement();
    }
}

void ReturnStatement() #Return : {}
{
    <RETURN> Expression() <SEMICOLON>
}

void Condition(): {}
{
    <OPEN_PAR> Expression() <CLOSE_PAR>
}

Token ArrayAccess() : {Token t;}
{
	t=<OPEN_BRACKET> Expression() <CLOSE_BRACKET>
	{ return t; } // for locating the place where the token is
}

// ---------------
// --Expressions--
// ---------------

void Expression() #void : {}
{
	And()
}

void And() #void : {Token t;}
{
	LessThan() (t=<AND> LessThan() {jjtThis.put("line", String.valueOf(t.beginLine)); jjtThis.put("column", String.valueOf(t.beginColumn)); } #And(2))*
}

void LessThan() #void : {Token t;}
{
	SumSub() (t=<LT> SumSub() {jjtThis.put("line", String.valueOf(t.beginLine)); jjtThis.put("column", String.valueOf(t.beginColumn)); } #LessThan(2))*
}

void SumSub() #void : {Token t;}
{
	MulDiv() ((t=<SUM> MulDiv() {jjtThis.put("line", String.valueOf(t.beginLine)); jjtThis.put("column", String.valueOf(t.beginColumn)); } #Sum(2) | t=<SUB> MulDiv() {jjtThis.put("line", String.valueOf(t.beginLine)); jjtThis.put("column", String.valueOf(t.beginColumn)); } #Sub(2)))*
}

void MulDiv() #void : {Token t;}
{
	Not() ((t=<MUL> Not() {jjtThis.put("line", String.valueOf(t.beginLine)); jjtThis.put("column", String.valueOf(t.beginColumn)); } #Mul(2) | t=<DIV> Not() {jjtThis.put("line", String.valueOf(t.beginLine)); jjtThis.put("column", String.valueOf(t.beginColumn)); } #Div(2) ))*
}

void Not() #void : {Token t;}
{
	(t=<NOT> Not() {jjtThis.put("line", String.valueOf(t.beginLine)); jjtThis.put("column", String.valueOf(t.beginColumn)); } #Not(1) ) | ExpressionExtension()
}

void ExpressionExtension() #void : {Token t;}
{
	ExpressionTerminalSymbols() (t = ArrayAccess() {jjtThis.put("line", String.valueOf(t.beginLine)); jjtThis.put("column", String.valueOf(t.beginColumn));} #ArrayAccessResult(2) | t = ObjectProperty() {jjtThis.put("line", String.valueOf(t.beginLine)); jjtThis.put("column", String.valueOf(t.beginColumn));} #ObjectProperty(2))*
}

Token ObjectProperty() #void : {Token t1;}
{
	t1 = <DOT> (
		<LENGTH> #Length
		| ObjectMethod()
	)
    {return t1;}
}

void ObjectMethod() : {Token t1;}
{
	t1 = <IDENTIFIER> {jjtThis.put("name", t1.image);}
	<OPEN_PAR> (ArgumentList())? <CLOSE_PAR>
}

void ArgumentList() #void : {}
{
	Expression() (<COMMA> Expression())*
}

void ExpressionTerminalSymbols() #void : {Token t1;}
{
	t1 = <INTEGERLITERAL> {jjtThis.put("val", t1.image);} #Integer
	| <TRUE> {jjtThis.put("val", "true");} #Boolean
	| <FALSE> {jjtThis.put("val", "false");} #Boolean
	| t1 = <IDENTIFIER> {jjtThis.put("name", t1.image); jjtThis.put("line", String.valueOf(t1.beginLine)); jjtThis.put("column", String.valueOf(t1.beginColumn));} #Identifier
	| <THIS> #This
	| <NEW> NewInstance()
	| <OPEN_PAR> Expression() <CLOSE_PAR>
}

void NewInstance() #New : {Token t1;}
{
	(<INT> {jjtThis.put("name", "int");} t1=<OPEN_BRACKET> Expression() { jjtThis.put("line", String.valueOf(t1.beginLine)); jjtThis.put("column", String.valueOf(t1.beginColumn)); } #NewArraySize(1) <CLOSE_BRACKET>)
	| (t1 = <IDENTIFIER> {jjtThis.put("name", t1.image);} <OPEN_PAR> <CLOSE_PAR>)
}
